-- local dbg = require("debugger")
-- dbg.auto_where = 2
local stack = require'tools.stack'

local subject
describe("empty", function()
  before_each(function()
    subject = stack.new()
  end)
  it("is empty", function()
    assert.is_true(subject:is_empty())
  end)
  it("but that changes if we push", function()
    subject:push(42)
    assert.is_false(subject:is_empty())
  end)
  it("one can peek", function()
    subject:push(42)
    assert.is_equal(42, subject:peek())
    assert.is_false(subject:is_empty())
  end)
  it("or pop", function()
    subject:push(42)
    assert.is_equal(42, subject:pop())
    assert.is_true(subject:is_empty())
  end)
  it("popping from empty, is not the best idea", function()
    assert.has_error(function()
      subject:pop()
    end, "Must not pop from empty stack")
  end)
  it("that holds for peek too", function()
    assert.has_error(function()
      subject:peek()
    end, "Must not peek into an empty stack -- beware of the abyss")
  end)
end)

describe("grow and shrink", function()
  before_each(function()
    subject = stack.new()
    subject:push("a")
    subject:push("b")
  end)
  it("let us peek and pop and peek", function()
    assert.is_equal("b", subject:peek()) 
    assert.is_equal("b", subject:pop()) 
    assert.is_equal("a", subject:peek()) 
  end)
  it("can still grow", function()
    subject:push("c")
    assert.is_equal("c", subject:pop()) 
    assert.is_equal("b", subject:peek()) 
    assert.is_equal("b", subject:pop()) 
    assert.is_equal("a", subject:pop()) 
    assert.is_true(subject:is_empty())

  end)
end)

describe("object independency", function()
  local object

  before_each(function()
    subject = stack.new()
    object = stack.new()
    subject:push(1)
  end)

  it("did not push to object", function()
    assert.is_true(object:is_empty())
  end)

  it("still has the data inside subject", function()
    assert.is_equal(1, subject:peek())
  end)
end)

describe("export data", function()
  before_each(function()
    subject = stack.new()
    subject:push(100)
    subject:push(200)
  end)

  it("we can export the table from a stack", function()
    assert.are.same({100, 200}, subject:to_list())
  end)

  it("is a save export, not exporting the stack", function()
    local exported = subject:to_list()
    table.remove(exported)
    assert.are.same({100, 200}, subject:to_list())
  end)
end)
