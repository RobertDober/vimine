local elixir = require'cccomplete.elixir'()

describe("elixir", function()

  describe("complete without do", function()
    describe("bare fn", function()
      completion = elixir.complete(" fn -> ")
      it("has the correct lines", function()
        assert.are.same({" fn ->", "   ", " end"}, completion.lines)
      end)
      it("has the correct offset", function()
        assert.is_equal(1, completion.offset)
      end)
      it("has the correct col", function()
        assert.is_equal(999, completion.col)
      end)
    end)
    describe("function with params", function()
      completion = elixir.complete(" fn {1}, a -> ")
      it("has the correct lines", function()
        assert.are.same({" fn {1}, a ->", "   ", " end"}, completion.lines)
      end)
      it("has the correct offset", function()
        assert.is_equal(1, completion.offset)
      end)
      it("has the correct col", function()
        assert.is_equal(999, completion.col)
      end)
    end)
  end)
end)

describe("complete with do", function()
  describe("any line", function()
    it("adds a  do", function()
      completion = elixir.complete("  something")
      assert.are.same({"  something do", "    ", "  end"}, completion.lines)
    end)
    it("adds a  do but erasing trailing ws first", function()
      completion = elixir.complete("  something ")
      assert.are.same({"  something do", "    ", "  end"}, completion.lines)
    end)
    it("does not another do though", function()
      completion = elixir.complete("  something  do ")
      assert.are.same({"  something do", "    ", "  end"}, completion.lines)
    end)
  end)
end)
